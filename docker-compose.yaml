name: openai-proxy

services:

  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.2.0
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.http.routers.traefik.rule=Host(`traefik.docker.localhost`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    networks:
      - proxy
      - default

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami:v1.10
    labels:
      - traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)

  dnsmasq:
    image: strm/dnsmasq
    restart: unless-stopped
    volumes:
      - ./dnsmasq.conf:/etc/dnsmasq.conf
    cap_add:
      - NET_ADMIN
    ports:
      - "127.0.0.1:53:53/udp"

  litellm:
    image: ghcr.io/berriai/litellm:main-v1.44.4
    restart: always
    volumes:
      - ./litellm-config.yaml:/app/config.yaml
    command: --port 4000 --config config.yaml
    labels:
      - traefik.http.routers.litellm.rule=Host(`litellm.docker.localhost`)
      - traefik.http.services.litellm.loadbalancer.server.port=4000
    env_file:
      - .env

  redis:
    image: redis:7.2.4-alpine3.19
    restart: always
    volumes:
      - redis_data:/data

  langfuse:
    image: langfuse/langfuse:2.75.2
    restart: always
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.http.routers.langfuse.rule=Host(`langfuse.docker.localhost`)
      - traefik.http.services.langfuse.loadbalancer.server.port=3000
    environment:
      - DATABASE_URL=${LANGFUSE_DATABASE_URL:?error}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:?error}
      - NEXTAUTH_URL=http://localhost:3000
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}
    env_file:
      - .env

  db:
    image: postgres:15.2-alpine3.17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      - POSTGRES_USER=${POSTGRES_USER:?error}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
      - POSTGRES_DB=${POSTGRES_DB:?error}
    volumes:
      - database_data:/var/lib/postgresql/data
    env_file:
      - .env

  # netshoot:
  #   image: nicolaka/netshoot:v0.13
  #   command: tail -f /dev/null

volumes:
  database_data:
    driver: local
  redis_data:
    driver: local

networks:
  proxy:
    external: true
